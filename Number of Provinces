class Solution {

    // This method finds the number of connected groups of cities.
    public int findCircleNum(int[][] isConnected) {
        // Create an array to keep track of visited cities.
        boolean[] visited = new boolean[isConnected.length];
        // Initialize the count of connected groups.
        int count = 0;

        // Loop through each city.
        for (int i = 0; i < isConnected.length; i++) {
            // If the city hasn't been visited yet:
            if (!visited[i]) {
                // Use depth-first search (dfs) to explore all connected cities.
                dfs(isConnected, i, visited);
                // Increase the count of connected groups.
                count++;
            }
        }
        // Return the total count of connected city groups.
        return count;
    }

    // This method performs depth-first search (dfs) to explore connected cities.
    private void dfs(int[][] isConnected, int u, boolean[] visited) {
        // Mark the current city as visited.
        visited[u] = true;

        // Check all cities to see if they are connected to the current city (u).
        for (int v = 0; v < isConnected.length; v++) {
            // If city v is not visited and is connected to city u:
            if (!visited[v] && isConnected[u][v] == 1) {
                // Recursively perform dfs on city v.
                dfs(isConnected, v, visited);
            }
        }
    }
}
