class Solution {

    // RECURSION + MEMO
    // int[][] dp;
    // int n;

    // public int findLongestChain(int[][] pairs) {
    // n = pairs.length;
    // dp = new int[n + 1][n + 1];
    // Arrays.sort(pairs, (a, b) -> a[1] - b[1]);
    // for (int[] row : dp) {
    // Arrays.fill(row, -1);
    // }
    // return solve(pairs, 0, -1);
    // }

    // public int solve(int[][] pairs, int i, int prev) {
    // if (i == n)
    // return 0;
    // if (prev != -1 && dp[prev][i] != -1)
    // return dp[prev][i];
    // int take = 0;
    // if (prev == -1 || pairs[i][0] > pairs[prev][1]) {
    // take = 1 + solve(pairs, i + 1, i);
    // }
    // int skip = solve(pairs, i + 1, prev);
    // if (prev != -1)
    // dp[prev][i] = Math.max(take, skip);
    // return Math.max(take, skip);
    // }

    // BOTTOM UP APPROACH
    public int findLongestChain(int[][] pairs) {
    int n = pairs.length;
    Arrays.sort(pairs, (a, b) -> a[1] - b[1]);
    int dp[] = new int [n];
    Arrays.fill(dp,1);
    int maxLis =1;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (pairs[j][1] < pairs[i][0]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                    maxLis = Math.max(maxLis, dp[i]);
                }
            }
        }

        return maxLis;
    }
}
