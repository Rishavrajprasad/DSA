// DFS Method
class Solution {
    public int findCircleNum(int[][] isConnected) {
        boolean[] visited = new boolean[isConnected.length];
        int count = 0;
        for (int i = 0; i<isConnected.length; i++)
        {
            if(!visited[i])
            {
                dfs(isConnected,i,visited);
                count++;
            }
        }
        return count;
    }
    private void dfs(int[][] isConnected, int u, boolean[] visited)
    {
        visited[u] = true;
        for(int v=0 ; v<isConnected.length;v++)
        {
            if(!visited[v] && isConnected[u][v] == 1)
            dfs(isConnected,v,visited);
        }
    }
}


// BFS Method

// class Solution
// {
//     public int findCircleNum(int[][] isConnected) {
//         boolean visited[] = new boolean[isConnected.length];
//         int count =0;
//         for (int i = 0; i<isConnected.length; i++)
//         {
//             if(!visited[i])
//             {
//                 bfs(isConnected,i,visited);
//                 count++;
//             }
//         }
//         return count;
//     }
//     private void bfs(int[][] isConnected, int start, boolean[] visited) {
//     Queue<Integer> queue = new LinkedList<>(); 
//     queue.offer(start); 
//     visited[start] = true; 

//     while (!queue.isEmpty()) {
//         int currentNode = queue.poll(); 

//         for (int neighbor = 0; neighbor < isConnected.length; neighbor++) {
//             if (isConnected[currentNode][neighbor] == 1 && !visited[neighbor]) {
//                 queue.offer(neighbor); 
//                 visited[neighbor] = true; 
//             }
//         }
//     }
// }
// }
